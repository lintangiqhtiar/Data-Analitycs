# -*- coding: utf-8 -*-
"""prepocessing_Lintang.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uemurcozwswFL2BC3XFJjnulX3ULD-JH
"""

import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler

# Muat dataset breast cancer
data = load_breast_cancer()

# Konversi dataset menjadi DataFrame
df = pd.DataFrame(data.data, columns=data.feature_names)

# Pilih kolom-kolom yang akan dinormalisasi (semua fitur dalam dataset)
columns_to_normalize = df.columns

# Inisialisasi objek StandardScaler
scaler = StandardScaler()

# Lakukan normalisasi pada kolom yang dipilih
df[columns_to_normalize] = scaler.fit_transform(df[columns_to_normalize])

# Tampilkan hasilnya
print(df.head())

import pandas as pd
from sklearn.datasets import load_breast_cancer

# Muat dataset breast cancer
data = load_breast_cancer()

# Konversi dataset menjadi DataFrame
df = pd.DataFrame(data.data, columns=data.feature_names)

# Cek jumlah data duplikat sebelum penanganan
jumlah_duplikat_sebelum = df.duplicated().sum()
print(f"Jumlah data duplikat sebelum penanganan: {jumlah_duplikat_sebelum}")

# Tangani data duplikat dengan menghapusnya
df.drop_duplicates(inplace=True)

# Cek jumlah data duplikat setelah penanganan
jumlah_duplikat_setelah = df.duplicated().sum()
print(f"Jumlah data duplikat setelah penanganan: {jumlah_duplikat_setelah}")

# Tampilkan data setelah penanganan data duplikat
print(df.head())

import pandas as pd
from sklearn.datasets import load_breast_cancer

# Muat dataset breast cancer
data = load_breast_cancer()

# Konversi dataset menjadi DataFrame
df = pd.DataFrame(data.data, columns=data.feature_names)

# Tambahkan beberapa data yang hilang secara acak sebagai contoh
import numpy as np
df.iloc[1:5, 1:3] = np.nan
df.iloc[6:8, 3:5] = np.nan

# Cek jumlah data yang hilang sebelum penanganan
jumlah_hilang_sebelum = df.isnull().sum().sum()
print(f"Jumlah data yang hilang sebelum penanganan: {jumlah_hilang_sebelum}")

# Tangani data yang hilang dengan mengisi nilai rata-rata kolom
df.fillna(df.mean(), inplace=True)

# Cek jumlah data yang hilang setelah penanganan
jumlah_hilang_setelah = df.isnull().sum().sum()
print(f"Jumlah data yang hilang setelah penanganan: {jumlah_hilang_setelah}")

# Tampilkan data setelah penanganan data yang hilang
print(df.head())

import pandas as pd
import numpy as np
from sklearn.datasets import load_breast_cancer
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt

# Muat dataset breast cancer
data = load_breast_cancer()

# Konversi dataset menjadi DataFrame
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target

# Pisahkan fitur dan target
X = df.drop('target', axis=1)
y = df['target']

# Inisialisasi model RandomForestClassifier
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Fit model ke data
model.fit(X, y)

# Dapatkan feature importance
feature_importance = model.feature_importances_

# Dapatkan nama fitur
feature_names = X.columns

# Gabungkan nama fitur dan feature importance
feature_importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': feature_importance})

# Urutkan berdasarkan feature importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Tampilkan 10 fitur teratas
print("10 fitur teratas:")
print(feature_importance_df.head(10))

# Visualisasikan feature importance
plt.figure(figsize=(12, 6))
plt.barh(feature_importance_df['Feature'][:10], feature_importance_df['Importance'][:10])
plt.xlabel('Importance')
plt.title('10 Fitur Teratas - Feature Importance')
plt.gca().invert_yaxis()
plt.show()

import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# Muat dataset breast cancer
data = load_breast_cancer()

# Konversi dataset menjadi DataFrame
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target

# Pisahkan fitur dan target
X = df.drop('target', axis=1)
y = df['target']

# Standarisasi fitur
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Inisialisasi PCA dengan komponen utama sebanyak 2
pca = PCA(n_components=2)

# Reduksi dimensi
X_pca = pca.fit_transform(X_scaled)

# Buat DataFrame baru dengan data hasil reduksi dimensi
df_pca = pd.DataFrame(data=X_pca, columns=['PC1', 'PC2'])
df_pca['target'] = y

# Tampilkan hasil reduksi dimensi
print(df_pca.head())

# Visualisasi hasil reduksi dimensi
plt.figure(figsize=(10, 6))
targets = [0, 1]  # Kelas 0 dan 1
colors = ['r', 'g']  # Warna untuk setiap kelas

for target, color in zip(targets, colors):
    indices_to_keep = df_pca['target'] == target
    plt.scatter(df_pca.loc[indices_to_keep, 'PC1'],
                df_pca.loc[indices_to_keep, 'PC2'],
                c=color,
                s=50)

plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('Reduksi Dimensi dengan PCA')
plt.legend(targets)
plt.show()

pip install -U imbalanced-learn

import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import RandomOverSampler
from collections import Counter

# Muat dataset breast cancer
data = load_breast_cancer()

# Konversi dataset menjadi DataFrame
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target

# Pisahkan fitur dan target
X = df.drop('target', axis=1)
y = df['target']

# Split dataset menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Hitung jumlah sampel kelas sebelum oversampling
print("Jumlah sampel kelas sebelum oversampling:")
print(Counter(y_train))

# Inisialisasi RandomOverSampler
oversampler = RandomOverSampler(random_state=42)

# Lakukan oversampling pada data latih
X_train_resampled, y_train_resampled = oversampler.fit_resample(X_train, y_train)

# Hitung jumlah sampel kelas setelah oversampling
print("\nJumlah sampel kelas setelah oversampling:")
print(Counter(y_train_resampled))